#include <TinyGPS++.h>
#include <SoftwareSerial.h>

#define GPS_SERIAL Serial1
#define HC12_SERIAL Serial3

// Motor pins
const int ENA = 12;
const int ENB = 13;
const int IN1 = 8;
const int IN2 = 9;
const int IN3 = 10;
const int IN4 = 11;

// Constants
const unsigned long COMMAND_TIMEOUT = 2000; // 2 seconds
const unsigned long GPS_TIMEOUT = 5000;    // 5 seconds
const int PWM_MIN = 50;                    // Minimum PWM to move motors

TinyGPSPlus gps;
unsigned long lastCommandTime = 0;
unsigned long lastValidGPS = 0;

struct MotorCommand {
  int left;
  int right;
} currentCommand = {0, 0};

void setup() {
  Serial.begin(115200);
  GPS_SERIAL.begin(9600);
  HC12_SERIAL.begin(9600);
  
  // Setup motor pins
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  
  stopMotors();
  Serial.println("Robot Initialized");
}

void loop() {
  // Read GPS data
  while (GPS_SERIAL.available() > 0) {
    if (gps.encode(GPS_SERIAL.read())) {
      if (gps.location.isValid()) {
        lastValidGPS = millis();
        sendGPSData();
      }
    }
  }

  // Check for GPS timeout
  if (millis() - lastValidGPS > GPS_TIMEOUT) {
    HC12_SERIAL.println("GPS:LOST");
  }

  // Process commands
  if (HC12_SERIAL.available() > 0) {
    String command = HC12_SERIAL.readStringUntil('\n');
    if (validateCommand(command)) {
      parseMotorCommand(command);
      executeMotorCommand();
      lastCommandTime = millis();
    }
  }

  // Safety timeout
  if (millis() - lastCommandTime > COMMAND_TIMEOUT) {
    stopMotors();
  }
  
  delay(50);
}

bool validateCommand(String cmd) {
  if (!cmd.startsWith("CMD:")) return false;
  int comma = cmd.indexOf(',');
  if (comma == -1 || comma == 4 || comma == cmd.length()-1) return false;
  return true;
}

void parseMotorCommand(String cmd) {
  int comma = cmd.indexOf(',');
  currentCommand.left = cmd.substring(4, comma).toInt();
  currentCommand.right = cmd.substring(comma+1).toInt();
}

void executeMotorCommand() {
  // Left motor control
  if (currentCommand.left > PWM_MIN) {
    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    analogWrite(ENA, currentCommand.left);
  } 
  else if (currentCommand.left < -PWM_MIN) {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);
    analogWrite(ENA, -currentCommand.left);
  } 
  else {
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);
    analogWrite(ENA, 0);
  }

  // Right motor control
  if (currentCommand.right > PWM_MIN) {
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);
    analogWrite(ENB, currentCommand.right);
  } 
  else if (currentCommand.right < -PWM_MIN) {
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    analogWrite(ENB, -currentCommand.right);
  } 
  else {
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, LOW);
    analogWrite(ENB, 0);
  }
}

void sendGPSData() {
  if (!gps.location.isValid()) return;
  
  HC12_SERIAL.print("GPS:");
  HC12_SERIAL.print(gps.location.lat(), 6);
  HC12_SERIAL.print(",");
  HC12_SERIAL.print(gps.location.lng(), 6);
  HC12_SERIAL.print(",");
  HC12_SERIAL.print(gps.speed.isValid() ? gps.speed.mps() : 0.0, 2);
  HC12_SERIAL.print(",");
  HC12_SERIAL.println(gps.course.isValid() ? gps.course.deg() : 0.0, 2);
}

void stopMotors() {
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  analogWrite(ENA, 0);
  analogWrite(ENB, 0);
}
