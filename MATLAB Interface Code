classdef PathFollowingRobot < handle
    properties
        SerialPort
        Waypoints
        CurrentWaypointIndex
        FuzzySystem
        Running
        MapFigure
        PathPlot
        RobotPlot
        WaypointPlot
        LastPositionTime
        PositionHistory
    end
    
    methods
        function obj = PathFollowingRobot(portName)
            % Initialize serial port
            obj.SerialPort = serialport(portName, 115200);
            configureTerminator(obj.SerialPort, "LF");
            flush(obj.SerialPort);
            
            % Load waypoints
            obj.Waypoints = [
7.214941000, 124.249145000; 7.214940679, 124.249146167; 7.214940357, 124.249147333;
  7.214940036, 124.249148500; 7.214939714, 124.249149667; 7.214939393, 124.249150833;
  7.214939071, 124.249152000; 7.214938750, 124.249153167; 7.214938429, 124.249154333;
  7.214938107, 124.249155500; 7.214937786, 124.249156667; 7.214937464, 124.249157833;
  7.214937143, 124.249159000; 7.214936821, 124.249160167; 7.214936500, 124.249161333;
  7.214936179, 124.249162500; 7.214935857, 124.249163667; 7.214935536, 124.249164833;
  7.214935214, 124.249166000; 7.214934893, 124.249167167; 7.214934571, 124.249168333;
  7.214934250, 124.249169500; 7.214933929, 124.249170667; 7.214933607, 124.249171833;
  7.214933286, 124.249173000; 7.214932964, 124.249174167; 7.214932643, 124.249175333;
  7.214932321, 124.249176500; 7.214932000, 124.249177667; 7.214931679, 124.249178833;
  7.214931357, 124.249180000; 7.214931036, 124.249181167; 7.214930714, 124.249182333;
  7.214930393, 124.249183500; 7.214930071, 124.249184667; 7.214929750, 124.249185833;
  7.214929429, 124.249187000; 7.214929107, 124.249188167; 7.214928786, 124.249189333;
  7.214928464, 124.249190500; 7.214928143, 124.249191667; 7.214927821, 124.249192833;
  7.214927500, 124.249194000; 7.214927179, 124.249195167; 7.214926857, 124.249196333;
  7.214926536, 124.249197500; 7.214926214, 124.249198667; 7.214925893, 124.249199833;
  7.214925571, 124.249201000; 7.214925250, 124.249202167; 7.214924929, 124.249203333;
  7.214924607, 124.249204500; 7.214924286, 124.249205667; 7.214923964, 124.249206833;
  7.214923643, 124.249208000; 7.214923321, 124.249209167; 7.214923000, 124.249210333;
  7.214922679, 124.249211500; 7.214922357, 124.249212667; 7.214922036, 124.249213833;
  7.214921714, 124.249215000; 7.214921393, 124.249216167; 7.214921071, 124.249217333;
  7.214920750, 124.249218500; 7.214920429, 124.249219667; 7.214920107, 124.249220833;
  7.214919786, 124.249222000; 7.214919464, 124.249223167; 7.214919143, 124.249224333;
  7.214918821, 124.249225500; 7.214918500, 124.249226667; 7.214918179, 124.249227833;
  7.214917857, 124.249229000; 7.214917536, 124.249230167; 7.214917214, 124.249231333;
  7.214916893, 124.249232500; 7.214916571, 124.249233667; 7.214916250, 124.249234833;
  7.214915929, 124.249236000; 7.214915607, 124.249237167; 7.214915286, 124.249238333;
  7.214914964, 124.249239500; 7.214914643, 124.249240667; 7.214914321, 124.249241833;
  7.214914000, 124.249243000;
            ];
            
            obj.CurrentWaypointIndex = 1;
            obj.Running = false;
            obj.PositionHistory = [];
            obj.LastPositionTime = datetime('now');
            
            % Initialize fuzzy logic system
            obj.FuzzySystem = readfis('path_following.fis');
            
            % Initialize map visualization
            obj.initializeMap();
            
            disp('Robot initialized and ready to run');
        end
        
        function initializeMap(obj)
            obj.MapFigure = figure('Name', 'Robot Path Monitoring', 'NumberTitle', 'off');
            
            [lat, lon] = obj.convertToNumeric(obj.Waypoints);
            obj.WaypointPlot = geoplot(lat, lon, 'g-', 'LineWidth', 2);
            hold on;
            obj.WaypointPlot = geoscatter(lat, lon, 'filled', 'MarkerFaceColor', 'red');
            
            obj.PathPlot = geoplot(lat(1), lon(1), 'b-', 'LineWidth', 1.5);
            obj.RobotPlot = geoscatter(lat(1), lon(1), 100, 'filled', 'MarkerFaceColor', 'blue');
            
            geobasemap('satellite');
            title('Robot Path Monitoring');
            legend('Planned Path', 'Waypoints', 'Robot Path', 'Robot Position');
            drawnow;
        end
        
        function [lat, lon] = convertToNumeric(~, waypoints)
            lat = waypoints(:,1);
            lon = waypoints(:,2);
        end
        
        function updateMap(obj, currentLat, currentLon)
            xData = obj.PathPlot.XData;
            yData = obj.PathPlot.YData;
            
            obj.PathPlot.XData = [xData, currentLat];
            obj.PathPlot.YData = [yData, currentLon];
            obj.PositionHistory = [obj.PositionHistory; currentLat, currentLon];
            
            obj.RobotPlot.LatitudeData = currentLat;
            obj.RobotPlot.LongitudeData = currentLon;
            
            targetLat = obj.Waypoints(obj.CurrentWaypointIndex, 1);
            targetLon = obj.Waypoints(obj.CurrentWaypointIndex, 2);
            geoscatter(targetLat, targetLon, 100, 'filled', 'MarkerFaceColor', 'yellow');
            
            latLim = [min([currentLat; obj.Waypoints(:,1)])-0.0001, max([currentLat; obj.Waypoints(:,1)])+0.0001];
            lonLim = [min([currentLon; obj.Waypoints(:,2)])-0.0001, max([currentLon; obj.Waypoints(:,2)])+0.0001];
            geolimits(latLim, lonLim);
            
            drawnow;
        end
        
        function start(obj)
            obj.Running = true;
            obj.run();
        end
        
        function stop(obj)
            obj.Running = false;
            % Send stop command to robot
            writeline(obj.SerialPort, "CMD:0,0");
        end
        
        function run(obj)
            while obj.Running
                if obj.SerialPort.NumBytesAvailable > 0
                    data = readline(obj.SerialPort);
                    
                    if startsWith(data, "GPS:")
                        try
                            gpsData = sscanf(data, "GPS:%f,%f,%f,%f");
                            if length(gpsData) == 4
                                currentLat = gpsData(1);
                                currentLon = gpsData(2);
                                speed = gpsData(3);
                                heading = gpsData(4);
                                
                                obj.updateMap(currentLat, currentLon);
                                
                                % Calculate distance to current waypoint
                                target = obj.Waypoints(obj.CurrentWaypointIndex, :);
                                distance = obj.calculateDistance(currentLat, currentLon, target(1), target(2));
                                
                                % Check if reached waypoint
                                if distance < 0.0001 % ~11 meters
                                    obj.CurrentWaypointIndex = min(obj.CurrentWaypointIndex + 1, size(obj.Waypoints, 1));
                                    if obj.CurrentWaypointIndex == size(obj.Waypoints, 1)
                                        obj.stop();
                                        disp('Final waypoint reached!');
                                        return;
                                    end
                                end
                                
                                % Calculate bearing and error
                                bearing = obj.calculateBearing(currentLat, currentLon, target(1), target(2));
                                headingError = obj.wrapTo180(bearing - heading);
                                
                                % Fuzzy logic control
                                inputs = [distance, headingError];
                                outputs = evalfis(obj.FuzzySystem, inputs);
                                
                                % Send motor commands
                                leftPWM = round(outputs(1));
                                rightPWM = round(outputs(2));
                                cmdStr = sprintf("CMD:%d,%d", leftPWM, rightPWM);
                                writeline(obj.SerialPort, cmdStr);
                            end
                        catch ME
                            fprintf('Error processing GPS data: %s\n', ME.message);
                        end
                    end
                end
                pause(0.1);
            end
        end
        
        function distance = calculateDistance(~, lat1, lon1, lat2, lon2)
            R = 6371000; % Earth radius in meters
            dLat = deg2rad(lat2-lat1);
            dLon = deg2rad(lon2-lon1);
            a = sin(dLat/2) * sin(dLat/2) + ...
                cos(deg2rad(lat1)) * cos(deg2rad(lat2)) * ...
                sin(dLon/2) * sin(dLon/2);
            c = 2 * atan2(sqrt(a), sqrt(1-a));
            distance = R * c;
        end
        
        function bearing = calculateBearing(~, lat1, lon1, lat2, lon2)
            lat1 = deg2rad(lat1);
            lon1 = deg2rad(lon1);
            lat2 = deg2rad(lat2);
            lon2 = deg2rad(lon2);
            
            y = sin(lon2-lon1) * cos(lat2);
            x = cos(lat1)*sin(lat2) - sin(lat1)*cos(lat2)*cos(lon2-lon1);
            bearing = rad2deg(atan2(y, x));
        end
        
        function angle = wrapTo180(~, angle)
            angle = mod(angle + 180, 360) - 180;
        end
        
        function delete(obj)
            if obj.Running
                obj.stop();
            end
            clear obj.SerialPort;
        end
    end
end
